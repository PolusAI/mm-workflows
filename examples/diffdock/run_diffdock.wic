steps:

  - id: extract_pdbbind_refined
    in:
      # https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html
      # "The query() method uses a slightly modified Python syntax by default.
      # For example, the & and | (bitwise) operators have the precedence of their boolean cousins, and and or.
      # This is syntactically valid Python, however the semantics are different."
      query: !ii '(Kd_Ki == "Kd") and (value < 0.001)'
      max_row: !ii 1 #25 # Use 1 for CI
      convert_Kd_dG: !ii True
    out:
    - output_pdb_paths: !& pdbbind_pdbs
    - output_sdf_paths: !& pdbbind_sdfs
    - experimental_dGs: !& exp_dGs

  - id: fix_side_chain
    scatter: [input_pdb_path]
    in:
      input_pdb_path: !* pdbbind_pdbs
    out:
    - output_pdb_path: !& pdbbind_pdbs.pdb

  - id: sanitize_ligand
    scatter: [input_small_mol_ligand]
    in:
      input_small_mol_ligand: !* pdbbind_sdfs
    out:
    - output_ligand: !& sanitized_sdfs
    - valid_ligand: !& valid_ligands

  - id: filter_array # remove invalid ligands from sanitized_ligand, avoid using null
    in:
      input_array: !* sanitized_sdfs
      input_bool_array: !* valid_ligands
    out:
    - output_array: !& final_sanitized_sdfs

  - id: filter_array # remove proteins corresponding to invalid ligands from sanitized_ligand
    in:
      input_array: !* pdbbind_pdbs.pdb
      input_bool_array: !* valid_ligands
    out:
    - output_array: !& final_pdbbind_pdbs.pdb

  - id: filter_array # remove dGs corresponding to invalid ligands from sanitized_ligand
    in:
      input_array: !* exp_dGs
      input_bool_array: !* valid_ligands
    out:
    - output_array: !& final_exp_dGs

  - id: diffdock
    scatter: [protein_path, ligand_path]
    scatterMethod: dotproduct
    in:
      protein_path: !* final_pdbbind_pdbs.pdb
      ligand_path: !* final_sanitized_sdfs
      samples_per_complex: !ii 20 # figure 3 left in DiffDock paper
      inference_steps: !ii 20 # figure S11 in DiffDock paper
    out:
    - output_files: !& diffdock_poses

  - id: rank_diffdock_poses
    scatter: [diffdock_poses]
    in:
      top_n_confident: !ii 1000 # if only using top_percent_confidence, then set top_n_confident to trivially high number
      # if only want to use top_n_confident, then set top_percent_confidence to 100
      top_percent_confidence: !ii 33 # take top third of most confident poses, see figure 3 right in DiffDock paper
      diffdock_poses: !* diffdock_poses
    out:
    - output_poses: !& output_poses

  - id: pose_cluster_filter
    scatter: [predicted_poses]
    in:
      predicted_poses: !* output_poses
      centroid_cutoff: !ii 5 # if centroid of all poses are within cutoff then only keep most confident pose, requires visual inspection

wic:
  graphviz:
    label: DiffDock

  steps:
    (1, extract_pdbbind_refined):
      wic:
        graphviz:
          label: Extract PDBbind Data
    (2, fix_side_chain):
      wic:
        graphviz:
          label: Fix Side Chains
    (3, sanitize_ligand):
      wic:
        graphviz:
          label: Sanitize Ligands
    (4, filter_array):
      wic:
        graphviz:
          label: Filter Ligands
    (5, filter_array):
      wic:
        graphviz:
          label: Filter Proteins
    (6, filter_array):
      wic:
        graphviz:
          label: Filter dG's
    (7, diffdock):
      wic:
        namespace: gpu
        graphviz:
          label: Executing DiffDock
    (8, rank_diffdock_poses):
      wic:
        graphviz:
          label: Rank all poses
    (9, pose_cluster_filter):
      wic:
        graphviz:
          label: Cluster poses
