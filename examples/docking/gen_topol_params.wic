inputs:
  input_ligand_pdbqt_path:
    type: File
    format:
    - edam:format_1476
  input_receptor_xyz_path:
    type: File
    format:
    - edam:format_3877
  input_top_zip_path:
    type: File
    format:
    - edam:format_3987
steps:
  convert_mol2:
    in:
      input_path: input_ligand_pdbqt_path
#      input_path: !* ligand.pdbqt
#    out:
#    - output_mol2_path: !& pose.mol2
  rename_residues_mol2:
    in:
      residue_name: !ii MOL
      column_index: !ii 7
# NOTE: minimize before calling acpype so 1. tleap complains less about close contacts:
# /usr/local/bin/teLeap: Warning!
# Close contact of 1.418311 angstroms between .R<UNL 1>.A<CG 8> and .R<UNL 1>.A<HD2 30>
# and 2. acpype doesn't complain about 'ERROR: Atoms TOO alone (> 3.0 Ang.)'
# (acpype suggests using --force, but it's better to just minimize.)
  acpype:
  # NOTE: We are using our own acpypye CWL adapter (NOT the biobb version) so
  # we have the choice of using charges from the mol2 file.
    in:
#      input_path: !* pose_mol.mol2 # Do NOT use pose_ligand.pdb
      charge_method: !ii user # take charges from mol2 file
    out:
    - output_itp_path: !& ligand_GMX.itp
      # NOTE: Although we don't need the *.itp topology file yet, we
      # need to use these coordinates with autodock because they are
      # sorted to agree with the *.itp topology include file.
      # Otherwise, we will get the grompp atom name warning (see below).
    - output_gro_path: !& ligand_GMX.gro
#    - output_top_path: !& ligand_GMX.top
    - output_pdb_path: !& ligand_GMX.pdb
# NOTE: acpype doesn't add forcefield or water topology #include lines.
  bash_top:
    in:
      script: !ii /gmx_add_topology_includes.sh # NOTE: Initial / required
#      input_top_path: !* ligand_GMX.top
#    out:
#    - output_top_path: !& ligand_GMX_includes.top
  zip_top:
    in:
#      input_top_path: !* ligand_GMX_includes.top
      input_itp_path: !* ligand_GMX.itp
#    out:
#    - output_top_zip_path: !& ligand_GMX.zip
  convert_xyz:
    in:
      input_path: !* ligand_GMX.pdb # Need .pdb, otherwise: issues, such as
      # the conversion of one atom type to another, can happen.
      # Because Openbabel doesn't work for gro files
      # https://open-babel.readthedocs.io/en/latest/FileFormats/GRO_format.html#
      # For example if you use the gro format and have a BR (Bromine) atom "1  MOL   BR   53  -1.479  -3.282   2.052"
      # it will be converted to Boron (B) in the output xyz file "B        -14.79000      -32.82000       20.52000"
      output_xyz_path: !ii pose_ligand.xyz
    out:
    - output_xyz_path: !& pose_ligand.xyz
  append_ligand:
    in:
#      input_itp_path: !* ligand_GMX.itp
      input_top_zip_path: input_top_zip_path # !*receptor.zip
    out:
    - output_top_zip_path: !& complex_vac.zip
  combine_structure:
    in:
      input_structure1: input_receptor_xyz_path
      input_structure2: !* pose_ligand.xyz
    out:
    - output_structure_path: !& complex_vac.pdb

wic:
  graphviz:
    label: Generate Ligand\nTopology & Parameters
  steps:
    (1, convert_mol2):
      wic:
        graphviz:
          label: Convert to\nmol2 format
    (2, rename_residues_mol2):
      wic:
        graphviz:
          label: Rename Residues\nto MOL
    (3, acpype):
      wic:
        graphviz:
          label: Generate Ligand\nTopology & Parameters
    (4, bash_top):
      wic:
        graphviz:
          label: Fix Ligand\nTopology Files
    (5, zip_top):
      wic:
        graphviz:
          label: Create Topology\nZip File
    (6, convert_xyz):
       wic:
         graphviz:
           label: Convert to\nXYZ format
    (7, append_ligand):
      wic:
        graphviz:
          label: Combine Receptor\nLigand Topologies
    (8, combine_structure):
      wic:
        graphviz:
          label: Combine Receptor\nLigand Coordinates
