inputs:
  input_ligand_pdbqt_path:
    type: File
    format:
    - edam:format_1476
  input_receptor_pdb_path:
    type: File
    format:
    - edam:format_1476
  input_top_zip_path:
    type: File
    format:
    - edam:format_3987
steps:
- convert_mol2:
    in:
      input_path: ~input_ligand_pdbqt_path
#      input_path: '*ligand.pdbqt'
#      output_mol2_path: '&pose.mol2'
- python3_mol2_to_mol2:
    in:
      script: /rename_residues_MOL.py # NOTE: Initial / required
#      input_mol2_path: '*pose.mol2'
#      output_mol2_path: '&pose_MOL.mol2'
# NOTE: minimize before calling acpype so 1. tleap complains less about close contacts:
# /usr/local/bin/teLeap: Warning!
# Close contact of 1.418311 angstroms between .R<UNL 1>.A<CG 8> and .R<UNL 1>.A<HD2 30>
# and 2. acpype doesn't complain about 'ERROR: Atoms TOO alone (> 3.0 Ang.)'
# (acpype suggests using --force, but it's better to just minimize.)
- acpype:
  # NOTE: We are using our own acpypye CWL adapter (NOT the biobb version) so
  # we have the choice of using charges from the mol2 file.
    in:
#      input_path: '*pose_MOL.mol2' # Do NOT use '*pose_ligand.pdb'
      output_itp_path: '&ligand_GMX.itp'
      # NOTE: Although we don't need the *.itp topology file yet, we
      # need to use these coordinates with autodock because they are
      # sorted to agree with the *.itp topology include file.
      # Otherwise, we will get the grompp atom name warning (see below).
#      output_gro_path: '&ligand_GMX.gro'
#      output_top_path: '&ligand_GMX.top'
      charge_method: user # take charges from mol2 file
# NOTE: acpype doesn't add forcefield or water topology #include lines.
- bash_top:
    in:
      script: /gmx_add_topology_includes.sh # NOTE: Initial / required
#      input_top_path: '*ligand_GMX.top'
#      output_top_path: '&ligand_GMX_includes.top'
- zip_top:
    in:
#      input_top_path: '*ligand_GMX_includes.top'
      input_itp_path: '*ligand_GMX.itp'
#      output_top_zip_path: '&ligand_GMX.zip'
- babel_convert:
    in:
#      input_path: '*ligand_GMX.gro' #'*pose_ligand.pdbqt'
      output_path: '&pose_ligand.pdb'

# Molecular Dynamics combine receptor & ligand
- append_ligand:
    in:
#      input_itp_path: '*ligand_GMX.itp'
      input_top_zip_path: ~input_top_zip_path #'*receptor.zip'
      output_top_zip_path: '&complex_vac.zip'
- cat_pdb:
    in:
      input_structure1: ~input_receptor_pdb_path # '*receptor_hydrogens.pdb'
      input_structure2: '*pose_ligand.pdb'
      output_structure_path: '&complex_vac.pdb'

wic:
  graphviz:
    label: Generate Ligand\nTopology & Parameters
  steps:
    (1, convert_mol2):
      wic:
        graphviz:
          label: Convert to\nmol2 format
    (2, python3_mol2_to_mol2):
      wic:
        graphviz:
          label: Rename Residues\nto MOL
    (3, acpype):
      wic:
        graphviz:
          label: Generate Ligand\nTopology & Parameters
    (4, bash_top):
      wic:
        graphviz:
          label: Fix Ligand\nTopology Files
    (5, zip_top):
      wic:
        graphviz:
          label: Create Topology\nZip File
    (6, babel_convert):
      wic:
        graphviz:
          label: Convert to\nPDB format
    (7, append_ligand):
      wic:
        graphviz:
          label: Combine Receptor\nLigand Topologies
    (8, cat_pdb):
      wic:
        graphviz:
          label: Combine Receptor\nLigand Coordinates
