steps:
- download_pdb.yml:
    in:
      #pdb_id: 1r4l # ACE2
      #pdb_id: 1ntp # trypsin
      pdb_id: 1uao # chignolin (for speed)
      #pdb_id: 6us9 # Influenza A M2
      #pdb_id: 2rlf # Influenza A M2
- setup_pdb.yml:
    in:
      input_pdb_path: '*protein.pdb'
      pdb_path: '&pdb.pdbqt'
      box_path: '&box.pdb'
      box_buffer: 20 # Angstroms
      water_type: spce
      forcefield: amber99sb-ildn

- download_smiles_ligand_db.yml:
    in:
      path: https://smacc.mml.unc.edu/ncats_target_based_curated.xlsx
      # query syntax: `column name` 'column value'
      query: "`Standard Type` == 'Kd' and `duplicate-type-classifier` == 'unique'"
      #query: "`Standard Type` == 'Kd' and `Target` == 'Matrix protein 2' and `Outcome` == 'Active'"
      max_row: 1 #25 # Use 1 for CI
      smiles_column: SMILES
      binding_data_column: Standard Value
      convert_Kd_dG: 'True'
      output_txt_path: '&binding_data.txt'

- assign_partial_charges.yml:
    scatter: [input_path]
# NOTE: cwltool uses the CLI args to determine caching. In batch mode, the
# ligands are passed (as CLI args) to vina all at once. Thus, if you want to
# incrementally increase the number of ligands, the previous results will NOT be cached!

- autodock_vina_batch:
    in:
      input_receptor_pdbqt_path: '*pdb.pdbqt'
      input_box_path: '*box.pdb'
      output_log_path: '&vina.log'
      output_batch_pdbqt_path: '&ligand_decoys_1D.pdbqt'

- split_pdbqt:
    scatter: [input_path]
    in:
      input_path: '*ligand_decoys_1D.pdbqt'
      output_pdb_path: '&ligand_decoys_2D.pdbqt'

- duplicate:
    in:
      input_pdbqt_singleton_path: '*pdb.pdbqt'
      input_pdbqt_array_path: '*ligand_decoys_2D.pdbqt'
      output_pdbqt_path: '&receptor_dup_2D.pdbqt'
    scatter: [input_pdbqt_array_path]

- autodock_vina_filter:
    in:
      input_ligand_pdbqt_path: '*ligand_decoys_2D.pdbqt'
      output_ligand_pdbqt_path: '&ligand_filter.pdbqt'
      input_receptor_pdbqt_path: '*receptor_dup_2D.pdbqt'
      input_log_path: '*vina.log'
      input_txt_path: '*binding_data.txt'
      docking_score_cutoff: -1.0
      max_num_poses_per_ligand: 1
      max_num_poses_total: 1 #25 # Use 1 for CI
      docking_scores: '&docking_scores'
      experimental_dGs: '&dGs'

- gen_topol_params.yml:
    in:
      input_ligand_pdbqt_path: '*ligand_filter.pdbqt'
    scatter: [input_ligand_pdbqt_path]

- stability.yml:
    scatter: [crd_path, top_zip_path]
    scatterMethod: dotproduct
    in:
      nsteps: 10000
      dt: 0.002
      temperature: 298.0
      pressure: 1.0
- autodock_vina_rescore.yml:
    scatter: [input_pdb_path]

- scatter_plot:
    in:
      xs: '*dGs'
      ys: '*docking_scores'
      ys2: '*docking_rescores'
wic:
  graphviz:
    label: Virtual Screening Demo
  steps:
    (1, download_pdb.yml):
      wic:
        inlineable: False
    (2, setup_pdb.yml):
      wic:
        inlineable: False # Due to yml wic tag inlineing issue and ~pdb_id
        graphviz:
          label: Setup PDB
    (3, download_smiles_ligand_db.yml):
      wic:
        inlineable: False
    (4, assign_partial_charges.yml):
      wic:
        inlineable: False
    (5, autodock_vina_batch):
      wic:
        graphviz:
          label: Docking
    (6, split_pdbqt):
      wic:
        graphviz:
          label: Extract Docking\nPoses
    (7, duplicate):
      wic:
        graphviz:
          label: Duplicate Receptor PDBQT
    (8, autodock_vina_filter):
      wic:
        graphviz:
          label: Apply Docking\nScore Cutoff
    (9, gen_topol_params.yml):
      wic:
        inlineable: False
    (10, stability.yml):
      wic:
        inlineable: False # Due to yml wic tag inlineing issue and ~ inputs
        steps:
          (1, setup.yml):
            wic:
              steps:
                (4, genion):
                  in:
                    output_top_zip_path: '&genion_complex.zip'
          (2, basic.yml):
            wic:
              steps:
                (3, prod.yml):
                  wic:
                    steps:
                      (2, grompp):
                        in:
                          input_top_zip_path: '*genion_complex.zip'
                      (3, mdrun):
                        in:
                          output_crd_path: '&prod_complex.gro'
                      (4, cwl_watcher_analysis.yml):
                        wic:
                          backend: complex
          (3, analysis.yml):
            wic:
              steps:
                (1, analysis_realtime.yml):
                  wic:
                    backend: complex
                (2, analysis_final.yml):
                  wic:
                    backend: complex
    (11, autodock_vina_rescore.yml):
      wic:
        inlineable: False
    (12, scatter_plot):
      wic:
        graphviz:
          label: Plot Experimental\nvs Predicted Binding
